# Types
type Campaign {
  id: String
  cause: String
  description: String
  goal: Float
  who: String
  picture: String
  created: String
  createdAtBlock: String
  status: String
  raised: String
  fundingStatus: Funding
  ismine: Boolean
  iswatchonly: Boolean
  newsItems: [NewsItem]
}

type NewsItem {
 created: String
 message: String
}

type Funding {
 receivedSinceCreation: String
 withdrawnSinceCreation: String
 balanceSinceCreation: String
}

# Inputs
input CampaignInput {
  cause: String
  goal: Float
  who: String
  description: String
  picture: String
}

input CampaignUpdateInput {
  cause: String
  goal: Float
  who: String
  description: String
  picture: String
  newsItem: String
  signature: String
}

input CampaignRemoveInput {
  signature: String
}

input PopNewsItemInput {
  newsItem: String
  signature: String
}

input MediaInput {
  picture: String
  signature: String
}

input MediaUpdateInput {
  picture: String
  signature: String
}
# Queries and mutations
type Mutation {
  createCampaign(id: String): Campaign
  claimCampaign(id: String): Campaign
  detailsCampaign(id: String, input: CampaignInput): Campaign
  updateCampaign(id: String, input: CampaignUpdateInput): Campaign
  removeCampaign(id: String, input: CampaignRemoveInput): Campaign
  setMedia(id: String, input: MediaInput): Campaign
  updateMedia(id: String, input: MediaUpdateInput): Campaign
  popNewsItem(id: String, input: PopNewsItemInput): Campaign
}

type Query {
  getCampaign(id: String): Campaign 
  getCampaigns(searchTerm: String): [Campaign] 
  getAllCampaigns: [Campaign] 
  getRedeemTx(id: String, tipPercent: Float, confirmedInNBlocks: Int, destAddr: String, txMessage: String): Campaign
}
